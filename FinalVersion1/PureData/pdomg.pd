#N canvas 230 38 938 916 12;
#X msg 3 86 \; pd dsp \$1;
#X obj 3 14 tgl 30 0 empty empty empty 17 7 0 10 #9c9c9c #000000 #000000 0 1;
#X obj 17 64 s global_volume_fade;
#X text 43 19 <-Click to start/stop DSP;
#X obj 225 364 unpackOSC;
#X obj 396 555 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 396 521 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 225 340 udpreceive 8080;
#X floatatom 567 431 5 0 0 0 - - - 0;
#X floatatom 225 438 5 0 0 0 - - - 0;
#X floatatom 396 429 5 0 0 0 - - - 0;
#X msg 567 524 stop;
#X obj 567 497 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0.soundTable 1.9475e+06 float 0;
#X coords 0 1.02 1.9475e+06 -1.02 200 130 1;
#X restore 702 974 graph;
#X obj 172 1353 hip~ 5;
#X text 181 1157 <-- frequency (Hz.);
#X floatatom 355 959 0 0 0 0 - - - 0;
#X obj 355 986 * 441;
#X obj 172 1238 *~ 0;
#X obj 172 1279 +~ 1;
#X obj 172 1129 phasor~ 0;
#X text 412 959 <-- chunk size (100ths of a second);
#X text 727 1108 ---- 44103 samples ----;
#X obj 295 1078 /;
#X obj 172 1097 * 1;
#X obj 161 1385 dac~;
#X msg 295 1050 44100 \$1;
#X obj 172 1320 tabread4~ \$0.soundTable;
#X obj 396 617 send audio;
#X obj 225 514 send speed;
#X obj 172 1032 receive speed;
#X obj 567 555 send stop;
#X obj 745 1159 loadbang;
#X obj 745 1325 soundfiler;
#X obj 745 1215 symbol \$1;
#X obj 745 1260 pack s f;
#X obj 843 1207 f \$0;
#X obj 745 1188 t b b;
#X obj 745 1355 / 441;
#X msg 745 1294 read -resize \$1 \$2.soundTable;
#X obj 638 1160 receive audio;
#X obj 745 1384 send sample;
#X obj 355 920 receive sample;
#X text 352 341 receive message from processing;
#X text 41 1031 looping sample ->;
#X obj 355 1020 send value;
#X obj 197 1197 receive value;
#X text 111 512 Change speed ->;
#X text 118 438 Speed value ->;
#X obj 645 1260 receive stop;
#X text 103 392 Message types ->;
#X text 365 1320 <- read from the table;
#X text 217 1279 <- add one to avoid beginning of table;
#X text 218 1237 <- readjust phase for range 0 - (chunk size);
#X text 304 21 The patch for playback of the background music for the Finger Letter guess game. The general rule is speed up the music by 0.1 time every time user guesses the correct word by forming the sign language letter using the glove we provide;
#X text 131 586 Send preselected music to looper ->;
#X text 482 621 <- Start music;
#X text 656 555 <- Stop music;
#X text 486 1626 receive message from processing;
#X msg 453 1747 open ./letters/B.wav;
#X msg 424 1723 open ./letters/A.wav;
#X msg 483 1773 open ./letters/D.wav;
#X msg 512 1800 open ./letters/E.wav;
#X msg 542 1828 open ./letters/F.wav;
#X msg 571 1854 open ./letters/G.wav;
#X msg 601 1881 open ./letters/H.wav;
#X msg 630 1910 open ./letters/I.wav;
#X msg 660 1937 open ./letters/N.wav;
#X msg 689 1968 open ./letters/O.wav;
#X msg 719 1998 open ./letters/R.wav;
#X msg 748 2030 open ./letters/S.wav;
#X obj 738 430 send letter;
#X obj 368 1627 receive letter;
#X obj 268 1692 print letter;
#X obj 368 2105 dac~, f 5;
#X obj 424 1693 select 65 66 68 69 70 71 72 73 78 79 82 83, f 51;
#X msg 368 1692 start;
#X obj 368 2049 readsf~ 1;
#X obj 230 479 print speed;
#X obj 574 460 print stopped;
#X text 476 1671 A B D E F G H I N O R S;
#X obj 402 458 print started;
#X text 356 3080 ------------------------------------------------------------ ------------------------------------------------------------;
#X text 389 2272 ------------------------------------------------------------ ------------------------------------------------------------;
#X text 1661 918 And why is it so roundabout to change the sample rate? The best way to change the sample rate of a digital signal without loosing too much quality and being able to do so efficiently in a real-time system is to use 4 point interpolation. That's what tabread4~ does. tabread4~ accepts an input signal which tells it the index to look up in its table. Since it's a signal \, it could receive a non integer value (like 3.25) and that's why it does 4 point interpolation. In our example here it would need to figure out what's a 4th of the way between the index 3 and index 4 Lets assume a table that's 1 second long. In order to play through tabread4~ without modifying its speed we would have to generate a signal which is a straight line that goes from 0 to 44099 in 1 second. If you generate the line in 0.5 seconds it would play it twice as fast and an octave up. You could try this with the line~ object \, but for a loop program it is better to use the phasor~ object which generates a saw tooth wave (a straight line that repeats). Why is it so roundabout? because this way we can do a lot more than just play loops at different speeds. Check out B08 - B14 to see what I mean. > What would this look like? ... It would be better to load it once since loading 91 seconds of data per array would cause an IO block generating pauses in your program. In order to hide the implementation detail of how it works you can create an abstraction. I've added here a playloop~ abstraction. Open playloop~-help.pd You can create as many as you like. I've used \$0 in the table name so each instance will get its own array. You can change it to make it work in stereo or to let you set start and end points., f 90;
#X text 368 214 ------------------------------------------------------------The part for handling the messages coming from Processing ____________________________________________________________ Here the patch receive three different types of messages to either start \, stop or modify the speed of the background music. ------------------------------------------------------------;
#X text 397 766 ------------------------------------------------------------The part for looping the selected music. ____________________________________________________________Here the patch receives both music and speed value. Depending on the speed value the flow modifies the frequency of the audio sample. ------------------------------------------------------------;
#X text 368 1478 -------------------------------------------------------------- The part for handling the letter messages coming from Processing ___________________________________________________ Here the patch receive letters messages to play the spelling. --------------------------------------------------------------, f 65;
#X msg 396 585 mozart.wav;
#X obj 368 2076 *~ 4;
#X obj 363 2358 print checkpoint;
#X obj 355 2658 print checkpoint;
#X obj 909 453 send playCheckpoint;
#X floatatom 909 423 5 0 0 0 - - - 0;
#X obj 499 2497 dac~, f 5;
#X obj 499 2470 *~ 2;
#X obj 499 2440 readsf~ 1;
#X obj 499 2359 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X msg 557 2397 open ./musics/checkPoint.wav;
#X msg 499 2396 start;
#X obj 499 2319 receive playCheckpoint;
#X obj 495 2593 receive playFinal;
#X obj 495 2764 dac~, f 5;
#X obj 495 2737 *~ 2;
#X obj 495 2707 readsf~ 1;
#X obj 495 2626 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X msg 495 2663 start;
#X msg 553 2664 open ./musics/final.wav;
#X obj 225 391 route /speed /start /stop /letter /checkpoint /final, f 147;
#X floatatom 1080 424 5 0 0 0 - - - 0;
#X obj 1080 453 send playFinal;
#X connect 1 0 0 0;
#X connect 1 0 2 0;
#X connect 4 0 108 0;
#X connect 5 0 88 0;
#X connect 6 0 5 0;
#X connect 7 0 4 0;
#X connect 8 0 12 0;
#X connect 8 0 79 0;
#X connect 9 0 29 0;
#X connect 9 0 78 0;
#X connect 10 0 6 0;
#X connect 10 0 81 0;
#X connect 11 0 31 0;
#X connect 12 0 11 0;
#X connect 14 0 25 0;
#X connect 14 0 25 1;
#X connect 16 0 17 0;
#X connect 17 0 26 0;
#X connect 17 0 45 0;
#X connect 18 0 19 0;
#X connect 19 0 27 0;
#X connect 20 0 18 0;
#X connect 23 0 24 1;
#X connect 24 0 20 0;
#X connect 26 0 23 0;
#X connect 27 0 14 0;
#X connect 30 0 24 0;
#X connect 32 0 37 0;
#X connect 33 0 38 0;
#X connect 34 0 35 0;
#X connect 35 0 39 0;
#X connect 36 0 35 1;
#X connect 37 0 34 0;
#X connect 37 1 36 0;
#X connect 38 0 41 0;
#X connect 39 0 33 0;
#X connect 40 0 34 0;
#X connect 42 0 16 0;
#X connect 46 0 18 1;
#X connect 49 0 39 0;
#X connect 59 0 77 0;
#X connect 60 0 77 0;
#X connect 61 0 77 0;
#X connect 62 0 77 0;
#X connect 63 0 77 0;
#X connect 64 0 77 0;
#X connect 65 0 77 0;
#X connect 66 0 77 0;
#X connect 67 0 77 0;
#X connect 68 0 77 0;
#X connect 69 0 77 0;
#X connect 70 0 77 0;
#X connect 72 0 73 0;
#X connect 72 0 75 0;
#X connect 72 0 76 0;
#X connect 75 0 60 0;
#X connect 75 1 59 0;
#X connect 75 2 61 0;
#X connect 75 3 62 0;
#X connect 75 4 63 0;
#X connect 75 5 64 0;
#X connect 75 6 65 0;
#X connect 75 7 66 0;
#X connect 75 8 67 0;
#X connect 75 9 68 0;
#X connect 75 10 69 0;
#X connect 75 11 70 0;
#X connect 76 0 77 0;
#X connect 77 0 89 0;
#X connect 88 0 28 0;
#X connect 89 0 74 0;
#X connect 93 0 92 0;
#X connect 95 0 94 0;
#X connect 96 0 95 0;
#X connect 97 0 98 0;
#X connect 97 0 99 0;
#X connect 98 0 96 0;
#X connect 99 0 96 0;
#X connect 100 0 90 0;
#X connect 100 0 97 0;
#X connect 101 0 91 0;
#X connect 101 0 105 0;
#X connect 103 0 102 0;
#X connect 104 0 103 0;
#X connect 105 0 107 0;
#X connect 105 0 106 0;
#X connect 106 0 104 0;
#X connect 107 0 104 0;
#X connect 108 0 9 0;
#X connect 108 1 10 0;
#X connect 108 2 8 0;
#X connect 108 3 71 0;
#X connect 108 4 93 0;
#X connect 108 5 109 0;
#X connect 109 0 110 0;
