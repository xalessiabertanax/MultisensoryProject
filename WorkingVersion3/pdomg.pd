#N canvas 629 46 693 748 12;
#X msg 3 86 \; pd dsp \$1;
#X obj 3 14 tgl 30 0 empty empty empty 17 7 0 10 #9c9c9c #000000 #000000 0 1;
#X obj 17 64 s global_volume_fade;
#X text 43 19 <-Click to start/stop DSP;
#X obj 206 308 unpackOSC;
#X obj 378 499 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 378 465 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#X obj 206 284 udpreceive 8080;
#X floatatom 551 375 5 0 0 0 - - - 0;
#X floatatom 206 382 5 0 0 0 - - - 0;
#X floatatom 378 373 5 0 0 0 - - - 0;
#X msg 551 468 stop;
#X obj 551 441 bng 19 250 50 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0.soundTable 1.19755e+06 float 0;
#X coords 0 1.02 1.19755e+06 -1.02 200 130 1;
#X restore 680 758 graph;
#X obj 150 1137 hip~ 5;
#X text 159 941 <-- frequency (Hz.);
#X floatatom 333 743 0 0 0 0 - - - 0;
#X obj 333 770 * 441;
#X obj 150 1022 *~ 0;
#X obj 150 1063 +~ 1;
#X obj 150 913 phasor~ 0;
#X text 390 743 <-- chunk size (100ths of a second);
#X text 705 892 ---- 44103 samples ----;
#X obj 273 862 /;
#X obj 150 881 * 1;
#X obj 139 1169 dac~;
#X msg 273 834 44100 \$1;
#X obj 150 1104 tabread4~ \$0.soundTable;
#X obj 378 561 send audio;
#X obj 206 458 send speed;
#X obj 150 816 receive speed;
#X obj 551 499 send stop;
#X obj 723 943 loadbang;
#X obj 723 1109 soundfiler;
#X obj 723 999 symbol \$1;
#X obj 723 1044 pack s f;
#X obj 821 991 f \$0;
#X obj 723 972 t b b;
#X obj 723 1139 / 441;
#X msg 723 1078 read -resize \$1 \$2.soundTable;
#X obj 616 944 receive audio;
#X obj 723 1168 send sample;
#X obj 333 704 receive sample;
#X text 333 285 receive message from processing;
#X text 19 815 looping sample ->;
#X obj 333 804 send value;
#X obj 175 981 receive value;
#X text 92 456 Change speed ->;
#X text 99 382 Speed value ->;
#X obj 623 1044 receive stop;
#X text 84 336 Message types ->;
#X text 343 1104 <- read from the table;
#X text 195 1063 <- add one to avoid beginning of table;
#X text 196 1021 <- readjust phase for range 0 - (chunk size);
#X text 304 21 The patch for playback of the background music for the Finger Letter guess game. The general rule is speed up the music by 0.1 time every time user guesses the correct word by forming the sign language letter using the glove we provide;
#X text 206 160 ------------------------------------------------------------The part for handling the messages coming from Processing Here the patch receive three different types of messages to either start \, stop or modify the speed of the background music. ------------------------------------------------------------;
#X text 211 608 ------------------------------------------------------------The part for looping the selected music Here the patch receives both music and speed value. Depending on the speed value the flow modifies the frequency of the audio sample. ------------------------------------------------------------;
#X text 113 530 Send preselected music to looper ->;
#X text 464 565 <- Start music;
#X text 640 499 <- Stop music;
#X text 214 1195 And why is it so roundabout to change the sample rate? Now I understand. The best way to change the sample rate of a digital signal without loosing too much quality and being able to do so efficiently in a real-time system is to use 4 point interpolation. That's what tabread4~ does. tabread4~ accepts an input signal which tells it the index to look up in its table. Since it's a signal \, it could receive a non integer value (like 3.25) and that's why it does 4 point interpolation. In our example here it would need to figure out what's a 4th of the way between the index 3 and index 4 Lets assume a table that's 1 second long. In order to play through tabread4~ without modifying its speed we would have to generate a signal which is a straight line that goes from 0 to 44099 in 1 second. If you generate the line in 0.5 seconds it would play it twice as fast and an octave up. You could try this with the line~ object \, but for a loop program it is better to use the phasor~ object which generates a saw tooth wave (a straight line that repeats). Why is it so roundabout? because this way we can do a lot more than just play loops at different speeds. Check out B08 - B14 to see what I mean. > What would this look like? ... It would be better to load it once since loading 91 seconds of data per array would cause an IO block generating pauses in your program. In order to hide the implementation detail of how it works you can create an abstraction. I've added here a playloop~ abstraction. Open playloop~-help.pd You can create as many as you like. I've used \$0 in the table name so each instance will get its own array. You can change it to make it work in stereo or to let you set start and end points.;
#X text 342 1878 receive message from processing;
#X text 211 2447 ------------------------------------------------------------The part for handling the messages coming from Processing Here the patch receive three different types of messages to either start \, stop or modify the speed of the background music. ------------------------------------------------------------;
#X msg 300 2028 open ./letters/B.wav;
#X msg 271 2004 open ./letters/A.wav;
#X msg 330 2054 open ./letters/D.wav;
#X msg 359 2081 open ./letters/E.wav;
#X msg 389 2109 open ./letters/F.wav;
#X msg 418 2135 open ./letters/G.wav;
#X msg 448 2162 open ./letters/H.wav;
#X msg 477 2191 open ./letters/I.wav;
#X msg 507 2218 open ./letters/N.wav;
#X msg 536 2249 open ./letters/O.wav;
#X msg 566 2279 open ./letters/R.wav;
#X msg 595 2311 open ./letters/S.wav;
#X obj 206 335 route /speed /start /stop /letter, f 99;
#X obj 723 374 send letter;
#X obj 215 1908 receive letter;
#X obj 115 1973 print letter;
#X obj 215 2386 dac~, f 5;
#X obj 215 2357 *~ 2;
#X obj 271 1974 select 65 66 68 69 70 71 72 73 78 79 82 83, f 51;
#X msg 215 1973 start;
#X obj 215 2330 readsf~ 1;
#X text 213 1762 ------------------------------------------------------------The part for handling the letter messages coming from Processing Here the patch receive letters messages to play the spelling. ------------------------------------------------------------;
#X obj 211 423 print speed;
#X obj 558 404 print stopped;
#X text 323 1952 A B D E F G H I N O R S;
#X msg 378 529 bg-music.wav;
#X obj 388 404 print started;
#X connect 1 0 0 0;
#X connect 1 0 2 0;
#X connect 4 0 75 0;
#X connect 5 0 88 0;
#X connect 6 0 5 0;
#X connect 7 0 4 0;
#X connect 8 0 12 0;
#X connect 8 0 86 0;
#X connect 9 0 29 0;
#X connect 9 0 85 0;
#X connect 10 0 6 0;
#X connect 10 0 89 0;
#X connect 11 0 31 0;
#X connect 12 0 11 0;
#X connect 14 0 25 0;
#X connect 14 0 25 1;
#X connect 16 0 17 0;
#X connect 17 0 26 0;
#X connect 17 0 45 0;
#X connect 18 0 19 0;
#X connect 19 0 27 0;
#X connect 20 0 18 0;
#X connect 23 0 24 1;
#X connect 24 0 20 0;
#X connect 26 0 23 0;
#X connect 27 0 14 0;
#X connect 30 0 24 0;
#X connect 32 0 37 0;
#X connect 33 0 38 0;
#X connect 34 0 35 0;
#X connect 35 0 39 0;
#X connect 36 0 35 1;
#X connect 37 0 34 0;
#X connect 37 1 36 0;
#X connect 38 0 41 0;
#X connect 39 0 33 0;
#X connect 40 0 34 0;
#X connect 42 0 16 0;
#X connect 46 0 18 1;
#X connect 49 0 39 0;
#X connect 63 0 83 0;
#X connect 64 0 83 0;
#X connect 65 0 83 0;
#X connect 66 0 83 0;
#X connect 67 0 83 0;
#X connect 68 0 83 0;
#X connect 69 0 83 0;
#X connect 70 0 83 0;
#X connect 71 0 83 0;
#X connect 72 0 83 0;
#X connect 73 0 83 0;
#X connect 74 0 83 0;
#X connect 75 0 9 0;
#X connect 75 1 10 0;
#X connect 75 2 8 0;
#X connect 75 3 76 0;
#X connect 77 0 78 0;
#X connect 77 0 81 0;
#X connect 77 0 82 0;
#X connect 80 0 79 0;
#X connect 81 0 64 0;
#X connect 81 1 63 0;
#X connect 81 2 65 0;
#X connect 81 3 66 0;
#X connect 81 4 67 0;
#X connect 81 5 68 0;
#X connect 81 6 69 0;
#X connect 81 7 70 0;
#X connect 81 8 71 0;
#X connect 81 9 72 0;
#X connect 81 10 73 0;
#X connect 81 11 74 0;
#X connect 82 0 83 0;
#X connect 83 0 80 0;
#X connect 88 0 28 0;
